using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Narration
{
    /// <summary>
    /// reads narration subtitle json files generated by whisper
    /// </summary>
    public class SubtitleJsonReader : MonoBehaviour
    {

        const float timePerLetterInFakeSubtitles = 0.1f;

        public static SubtitleJsonData ReadSubtitleJson(string subtitleJsonString)
        {
            SubtitleJsonData data = JsonUtility.FromJson<SubtitleJsonData>(subtitleJsonString);
            return data;
        }

        public static SubtitleJsonData MakeSubtitleFromText(string text)
        {
            SubtitleJsonData subtitle = new SubtitleJsonData();
            subtitle.text = text;
            subtitle.segments = BreakTextIntoSegments(text);
            subtitle.language = "en";
            return subtitle;
        }

        private static SubtitleSegment[] BreakTextIntoSegments(string text)
        {
            string[] sentences = text.Split(new[] { '.', '!', '?' }, System.StringSplitOptions.RemoveEmptyEntries);
            List<SubtitleSegment> segments = new List<SubtitleSegment>();
            float totalTime = 0;
            for (int i = 0; i < sentences.Length; i++)
            {
                string segmentText = sentences[i].Trim();
                SubtitleSegment segment = new SubtitleSegment();
                segment.id = i;
                segment.text = segmentText;
                segment.start = totalTime;

                SubtitleWord[] words = segmentText.Split(' ').Select(word => new SubtitleWord { word = word }).ToArray();
                foreach (SubtitleWord word in words)
                {
                    float timeForThisWord = word.word.Length * timePerLetterInFakeSubtitles;
                    word.start = totalTime;
                    word.end = totalTime + timeForThisWord;
                    totalTime = word.end;
                }

                segment.end = totalTime;
                segment.words = words;
                segments.Add(segment);
            }
            return segments.ToArray();
        }

        public static int CountWordsInSubtitle(SubtitleJsonData subtitle)
        {
            int wordCount = 0;

            foreach (SubtitleSegment segment in subtitle.segments)
            {
                wordCount += segment.words.Length;
            }

            return wordCount;
        }

        public static int CountWordsInSubtitleFile(TextAsset subtitleFile)
        {
            SubtitleJsonData subtitleJsonData = ReadSubtitleJson(subtitleFile.text);
            int subtitleWordCount = CountWordsInSubtitle(subtitleJsonData);
            return subtitleWordCount;
        }
    }

    [System.Serializable]
    public class SubtitleJsonData //should move into separate file
    {
        public string text;
        public SubtitleSegment[] segments;
        public string language;

        public List<SubtitleWord> GetWords()
        {
            List<SubtitleWord> words = new();
            foreach (SubtitleSegment segment in segments)
            {
                foreach (SubtitleWord word in segment.words)
                {
                    words.Add(word);
                }
            }
            return words;
        }

        public float GetTotalDuration()
        {
            float totalDuration = 0;
            if (segments.Length > 0)
            {
                totalDuration = segments[segments.Length - 1].end;
            }
            return totalDuration;
        }

        public void Log()
        {
            Debug.Log(text);
            foreach (SubtitleSegment segment in segments)
            {
                foreach (SubtitleWord word in segment.words)
                {
                    Debug.Log(word.start + " - " + word.end + ": " + word.word);
                }
            }
        }

    }

    [System.Serializable]
    public class SubtitleSegment  //should move into separate file
    {
        public int id;
        public int seek;
        public float start;
        public float end;
        public string text;
        public int[] tokens;
        public float temperature;
        public float avg_logprob;
        public float compression_ratio;
        public float no_speech_prob;
        public SubtitleWord[] words;
    }

    [System.Serializable]
    public class SubtitleWord  //should move into separate file
    {
        public string word;
        public float start;
        public float end;
        public float probability;
        public bool pause = false;
    }
}
